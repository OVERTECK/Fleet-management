// <auto-generated />
using System;
using Backend.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.DataAccess.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20251028174218_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.DataAccess.Entities.CarEntity", b =>
                {
                    b.Property<string>("VIN")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalKM")
                        .HasColumnType("integer");

                    b.HasKey("VIN");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Backend.DataAccess.Entities.DriverEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryDrive")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Pathronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("Backend.DataAccess.Entities.GasStationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarVIN")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("RefilledLiters")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CarVIN");

                    b.ToTable("GasStations");
                });

            modelBuilder.Entity("Backend.DataAccess.Entities.MaintenanceRecordEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarVIN")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("TypeWork")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CarVIN");

                    b.ToTable("MaintenanceRecords");
                });

            modelBuilder.Entity("Backend.DataAccess.Entities.RouteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CountKM")
                        .HasColumnType("integer");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Backend.DataAccess.Entities.TargetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarVIN")
                        .HasColumnType("text");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CarVIN");

                    b.HasIndex("DriverId");

                    b.ToTable("Targets");
                });

            modelBuilder.Entity("Backend.DataAccess.Entities.TripEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarVIN")
                        .HasColumnType("text");

                    b.Property<int>("ConsumptionLitersFuel")
                        .HasColumnType("integer");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TraveledKM")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CarVIN");

                    b.HasIndex("DriverId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Backend.DataAccess.Entities.GasStationEntity", b =>
                {
                    b.HasOne("Backend.DataAccess.Entities.CarEntity", "Car")
                        .WithMany()
                        .HasForeignKey("CarVIN");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Backend.DataAccess.Entities.MaintenanceRecordEntity", b =>
                {
                    b.HasOne("Backend.DataAccess.Entities.CarEntity", "Car")
                        .WithMany()
                        .HasForeignKey("CarVIN");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Backend.DataAccess.Entities.TargetEntity", b =>
                {
                    b.HasOne("Backend.DataAccess.Entities.CarEntity", "Car")
                        .WithMany()
                        .HasForeignKey("CarVIN");

                    b.HasOne("Backend.DataAccess.Entities.DriverEntity", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Backend.DataAccess.Entities.TripEntity", b =>
                {
                    b.HasOne("Backend.DataAccess.Entities.CarEntity", "Car")
                        .WithMany()
                        .HasForeignKey("CarVIN");

                    b.HasOne("Backend.DataAccess.Entities.DriverEntity", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Driver");
                });
#pragma warning restore 612, 618
        }
    }
}
